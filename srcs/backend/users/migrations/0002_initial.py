# Generated by Django 4.2.5 on 2025-02-23 16:53

import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, null=True, unique=True)),
                ('online_status', models.BooleanField(default=False)),
                ('avatar', models.URLField(blank=True, null=True)),
                ('password', models.CharField(default='default_password', max_length=128)),
                ('active_session_id', models.CharField(blank=True, max_length=128, null=True)),
                ('twofa_method', models.CharField(choices=[('None', 'None'), ('totp', 'TOTP'), ('sms', 'SMS'), ('email', 'Email')], default='None', max_length=5)),
                ('is_2fa_enabled', models.BooleanField(default=False)),
                ('otp_secret', models.CharField(blank=True, max_length=255, null=True)),
                ('chat_id', models.CharField(blank=True, max_length=15, null=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='custom_user_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='custom_user_permissions', to='auth.permission')),
            ],
        ),
        migrations.CreateModel(
            name='Friend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted')], max_length=10)),
                ('friend', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friends_with', to='users.user')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friends', to='users.user')),
            ],
        ),
        migrations.CreateModel(
            name='UserStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_matches', models.IntegerField(default=0)),
                ('total_wins', models.IntegerField(default=0)),
                ('total_points_scored', models.IntegerField(default=0)),
                ('total_points_against', models.IntegerField(default=0)),
                ('current_win_streak', models.IntegerField(default=0)),
                ('longest_win_streak', models.IntegerField(default=0)),
                ('last_match_date', models.DateField(blank=True, null=True)),
                ('registered_at', models.DateField(auto_now_add=True)),
                ('tournaments_won', models.IntegerField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to='users.user')),
            ],
            options={
                'indexes': [models.Index(fields=['user'], name='users_users_user_id_531add_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='users_user_usernam_65d164_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_user_email_6f2530_idx'),
        ),
        migrations.AddIndex(
            model_name='friend',
            index=models.Index(fields=['user'], name='users_frien_user_id_dc4b91_idx'),
        ),
        migrations.AddIndex(
            model_name='friend',
            index=models.Index(fields=['friend'], name='users_frien_friend__2d6560_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='friend',
            unique_together={('user', 'friend')},
        ),
    ]
